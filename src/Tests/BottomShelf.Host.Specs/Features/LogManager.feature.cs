// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.0.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace BottomShelf.Host.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LogManager")]
    public partial class LogManagerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LogManager.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LogManager", "In order to log\r\nAs a user of the framework\r\nI want to be ability manage the log " +
                    "for different types", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the default log")]
        public virtual void GetTheDefaultLog()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the default log", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.When("I ask for the log using \'null\' as the type");
#line 8
 testRunner.Then("the log should be of type \'BottomShelf.ConsoleLog, BottomShelf\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set the log factory method")]
        public virtual void SetTheLogFactoryMethod()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set the log factory method", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("the log factory method will return a log of type \'BottomShelf.Host.Specs.Mocks.Te" +
                    "stLogA, BottomShelf.Host.Specs\' for \'BottomShelf.Host.Specs.Mocks.ClassA, Bottom" +
                    "Shelf.Host.Specs\'");
#line 12
 testRunner.And("the log factory method will return a log of type \'BottomShelf.Host.Specs.Mocks.Te" +
                    "stLogB, BottomShelf.Host.Specs\' for \'BottomShelf.Host.Specs.Mocks.ClassB, Bottom" +
                    "Shelf.Host.Specs\'");
#line 13
 testRunner.When("I ask for the log using \'BottomShelf.Host.Specs.Mocks.ClassA, BottomShelf.Host.Sp" +
                    "ecs\' as the type");
#line 14
 testRunner.Then("the log should be of type \'BottomShelf.Host.Specs.Mocks.TestLogA, BottomShelf.Hos" +
                    "t.Specs\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
